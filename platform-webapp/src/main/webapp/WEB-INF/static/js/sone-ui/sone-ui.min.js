$.widget("ui.soneNoticeAndTask", {
	options : {
		pageNumber:1,
		numberOfPages:1,
		type:'notice'
	},

	_create : function() {
	   if(this.options.type=='notice'){
	        var noticeHtml='<div style="display:none">'
	             +' <div id="sales_message" title="营销通知:">'
				   +' </div>'
			    +' </div>';
		    var noticeListHtml ='<div style="display:none">'
								   +' <div id="sales_message_list" title="您所有的营销通知:">'
								   +' </div>'
							   +' </div>';
			$(document.body).append(noticeHtml);
			$(document.body).append(noticeListHtml);
			//init common dom id
			this.noticePageTableBodyId="noticePageTableBodyId";
			// add message event
			this.createDialog("sales_message", 800);
			// message list
			this.createDialog("sales_message_list", 800);
			this.createNoticeSummaryTable();
	   
	   }else if(this.options.type=='task'){
	       var taskListHtml ='<div style="display:none">'
							   +' <div id="mytask_message_list" title="您当前任务:">'
							   +' </div>'
					       +' </div>';
			$(document.body).append(taskListHtml);
			this.taskPageTableBodyId="myWork_pageResultList";
			// task list
			this.createDialog("mytask_message_list", 900);
			this.createTaskSummaryTable();

	   }	   

	},

	_setOption : function(key, value) {
		this.options[key] = value;

	},

	_update : function(data) {

		this._initEvents();
	},

	_initEvents : function(element) {

	},

	_destroy : function() {

	},
	createNoticeSummaryTable : function() {
		
		var url = NOTICE_SUMMARY_TABLE_URL + "?page=" + 1
				+ "&pageSize=" + 5 + "&date=" + new Date();

		this.ajaxRequest(url, "get", "json", $.proxy(
						this.renderNoticeSummaryTable, this),"noticeSummaryJsonpCallBack");

	},
	createNoticeDetail : function(id) {
		var scope = this;
		var url = NOTICE_DETAIL_URL + '?id=' + id;
		var noticeDetailTemp
		var callBack = function(data) {
		    var data=eval(data);
			$("#sales_message").html(scope.renderNoticeDetail(data));
			$('#sales_message').dialog('open');
		};
		this.ajaxRequest(url, "get", "jsonp", callBack,"noticeDetailJsonpCallBack");
		
	},
	renderNoticeSummaryTable : function(mydata) {
		var scope = this;
		if(typeof mydata.rows=="string"){
		   mydata.rows=eval(mydata.rows);
		}
		var notices = mydata || {};
		var rows = notices.rows || [];
		var unReadTotal = notices.unReadTotal || 0;
		var noticeNum = '<span class="label  label-success">' + unReadTotal
				+ '</span>';
		//$("#" + noticeDomId + ">a").append(noticeNum);
		this.element.children("a").append(noticeNum);
		$.each(rows, function(k, v) {
			if (k == 0) {
				// 添加UL头
				scope.element.append('<ul class="dropdown-menu fore1 " role="menu"></ul>');
				scope.element.find(".dropdown-menu.fore1")
						.append('<li class="header"> <span>营销体系通知:</span></li>');
			}
			var createDate = null;
			if (this.updateTime) {
				createDate = moment(v.updateTime)
						.format('YYYY-MM-DD hh:00');
			} else {
				createDate = moment(v.createTime)
						.format('YYYY-MM-DD hh:00');
			}
			var item = '<li><a href="javascript:;;" class="line"> '
			        + ' <div style="display:none">' + v.id + '</div>'
					+ ' <div class="u-name">' + k + '</div>'
					+ ' <div class="u-info">' + v.title + '</div>'
					
					+ '<div class="u-time">' + createDate + '</div>'
					+ '</a></li>';

			scope.element.find(".dropdown-menu.fore1").append(item);
			if (k == rows.length - 1) {
				scope.element.find(".dropdown-menu.fore1")
						.append(' <li id="noticeMore" class="footer"><a href="#">更多...</a></li>');
			}
		});
		// 添加事件
		$('.dropdown-menu.fore1 li').not("#noticeMore").click(function(e) {
					var id = $(this).find("a>div:eq(0)").text();
					scope.createNoticeDetail(id);
                    return false;
				});
		$('#noticeMore').click(function(){
		    //这个url暂时没有，需要后台支持
		    window.open(NOTICE_PAGE_TABLE_URL, 'newwindow');
		});
		

	},
	
	createTaskSummaryTable : function() {
       
		var url = TASK_SUMMARY_TABLE_URL + "?page=" + 1
				+ "&pageSize=" + 5 + "&date=" + new Date();

		this.ajaxRequest(url, "get", "json", $.proxy(
						this.renderTaskSummaryTable, this),"taskSummaryJsonpCallBack");
	},
	createTaskDetail : function(id) {
		var scope = this;
		var url = TASK_DETAIL_URL + '?taskId=' + id;
		/*var callBack = function() {
			$("#sales_message").html(data);
			$('#sales_message').dialog('open');

		};*/
		this.ajaxRequest(url, "get", "json", $.proxy(this.renderTaskDetail,this),"taskDetailJsonpCallBack");
		
	},
	renderTaskSummaryTable : function(mydata) {

	    var scope = this;
		if(typeof mydata.rows=="string"){
		   mydata.rows=eval(mydata.rows);
		}
		var tasks = mydata || {};
		var rows = tasks.rows || [];
		var unReadTotal = tasks.unReadTotal || 0;
		var taskNum = '<span class="label  label-success">' + unReadTotal
				+ '</span>';
		this.element.children("a").append(taskNum);

		$.each(rows, function(k, v) {
            var date = "";
			if (v.dueDate) {
				date = moment(v.dueDate).format('YYYY-MM-DD hh:00');
			}
			if (k == 0) {
				scope.element.append('<ul class="dropdown-menu fore2 " role="menu"></ul>');
				scope.element.find(".dropdown-menu.fore2")
						.append('<li class="header"><span>您的任务：</span></li>');
			}
			var item = '<li><a href="javascript:;;" class="line"> '
					+ ' <div style="display:none;">' + v.id + '</div>'
					+ ' <div class="u-name">' + k + '</div>'
					+ ' <div class="u-info">' + v.title + '</div>'
					+ '<div class="u-time">' + date + '</div>'
					+ '</a></li>';
			scope.element.find(".dropdown-menu.fore2").append(item);
			if (k == rows.length - 1) {
				scope.element.find(".dropdown-menu.fore2")
						.append(' <li id="taskMore" class="footer"><a href="#">更多...</a></li>');
			}
		});
		// 添加事件
		$('.dropdown-menu.fore2 li').not("#taskMore").click(function(e) {
					var id = $(this).find("a>div:eq(0)").text();
					scope.createTaskDetail(id);
                    return false;
				});
		$('#taskMore').click(function(){
		    //这个url暂时没有，需要后台支持
		    window.open(TASK_PAGE_TABLE_URL, 'newwindow');
		});
	},
	renderNoticeDetail:function(mydata){
	    var dateStr="";
		var notice=mydata.notice;
		var viewAccount=mydata.viewAccount;
	    if(notice.updateTime){
	        dateStr=moment(notice.updateTime).format('YYYY-MM-DD hh:00');
		}else{
		    dateStr=moment(notice.createTime).format('YYYY-MM-DD hh:00');
		}
			
	   var template='<div>'+
				'<div style="margin: 20.5px 10px;background-color:#F0F0F0;height:30px;vertical-align:middle;">'+
					'<span style="line-height:30px;">'+
						'<b>通知标题:'+notice.title+'</b>'+
					'</span>'+
				'</div>'+
				'<div>'+
					'<div>'+
						'<div style="margin: 2px 10px;border-bottom-style:dashed;border-bottom-width:2px;border-bottom-color:#F0F0F0;">由'+notice.creator+'发表于'+
						    dateStr+
							'&emsp;通知编号：'+notice.num+
							'&emsp;查看：'+viewAccount+
						'</div>'+
					   ' <div style="margin: 3px 10px;">'+
							'<p>'+notice.content+'</p>'+
						'</div>'+
					'</div>'+
				'</div>'+
			'</div>';
	    return template;
	},
	renderTaskDetail : function(mydata) {
		var scope=this;
		$("#myWork_workDetaiDiv").remove();
		var diaHtml = '<div class="modal fade" id="myWork_workDetaiDiv" tabindex="-1" role="dialog" aria-labelledby="myWork_workTitleLabel" aria-hidden="true"> '
				+ '<div class="modal-dialog"> '
				+ ' <div class="modal-content"> '
				+ '  <div class="modal-header"> '
				+ '<button type="button" class="close" data-dismiss="modal" aria-hidden="true" id="closeBtn" >&times;</button> '
				+ '<h4 class="modal-title" id="myWork_workTitleLabel">查看任务</h4> '
				+ '</div> '
				+ '<div class="modal-body"> '
				+ '<form id="myWorkForm" role="form" novalidate> '
				+ '<fieldset> '
				+ '<div class="hidden"> '
				+ '<input type="text" id="myWork_assignmentId" /> '
				+ '<input type="text" id="myWork_taskId" /> '
				+ '</div> '
				+ '<div class="row"> '
				+ '<div class="col-xs-6"> '
				+ '<div class="form-group"> '
				+ '<label for="myWork_taskTitleInput">任务标题</label> '
				+ '<input type="text" class="form-control" id="myWork_taskTitleInput" readonly /> '
				+ '</div> '
				+ '</div> '
				+ '<div class="col-xs-6"> '
				+ '<div class="form-group"> '
				+ '<label for="myWork_taskOwnerInput">任务发布人</label> '
				+ '<input type="text" class="form-control" id="myWork_taskOwnerInput" readonly /> '
				+ '</div> '
				+ '</div> '
				+ '<div class="col-xs-6"> '
				+ '<div class="form-group" id="myWork_taskAssignerDiv"> '
				+ '<label for="myWork_taskAssignerInput">任务转派人</label> '
				+ '<input type="text" class="form-control" id="myWork_taskAssignerInput" readonly /> '
				+ '</div> '
				+ '</div> '
				+ '<div class="col-xs-6"> '
				+ '<div class="form-group"> '
				+ '<label for="myWork_assignmentStatus">任务完成状态</label> '
				+ '<input type="text" class="form-control" id="myWork_assignmentStatus" readonly /> '
				+ '</div> '
				+ '</div> '
				+ '<div class="col-xs-6"> '
				+ '<div class="form-group"> '
				+ '<label for="myWork_taskDescTextArea">任务描述</label> '
				+ '<textarea class="form-control" rows="6" id="myWork_taskDescTextArea" readonly></textarea> '
				+ '</div> '
				+ '</div> '
				+ '<div class="col-xs-6"> '
				+ '<div class="form-group"> '
				+ '<label for="myWork_dueTime">期望完成时间</label> '
				+ '<input type="text" id="myWork_dueTime" class="form-control" readonly /> '
				+ '</div> '
				+ '</div> '
				+ '<div class="col-xs-6"> '
				+ '<div class="form-group" id="myWork_taskOwnerDiv"> '
				+ '<label for="mywork_taskOwner">任务接收人</label> '
				+ '<input id="mywork_taskOwner" name="mywork_taskOwner" readonly> '
				+ '</input> '
				+ '</div> '
				+ '</div> '
				+ '<div class="col-xs-6"> '
				+ '<div class="form-group"> '
				+ '<label for="myWork_comment">操作备注</label> '
				+ '<input type="text" id="myWork_comment" class="form-control" maxlength="50" /> '
				+ '</div> '
				+ '</div> '
				+ '<div class="col-xs-12"> '
				+ '<div class="form-group"> '
				+ '<table class="table table-hover table-bordered" > '
				+ '<thead class="header"> '
				+ '<tr> '
				+ '<th style="width: 30%">动作</th> '
				+ '<th style="width: 50%">备注</th> '
				+ '<th style="width: 20%">操作时间</th> '
				+ '</tr> '
				+ '</thead> '
				+ '<tbody id="myWork_traceList"> '
				+ '</tbody> '
				+ '</table> '
				+ '</div> '
				+ '</div> '
				+ '</div> '
				+ '</fieldset> '
				+ '</form> '
				+ '</div> '
				+ '</div> ' + '</div> ' + '</div> ' + '</div> ';
				$(document.body).append(diaHtml);
				//装载表单
				$('#myWork_taskId').val(mydata.task.id);
				$('#myWork_assignmentId').val(mydata.assignment.id);
				$('#myWork_taskTitleInput').val(mydata.task.title);
				$('#myWork_taskOwnerInput').val(mydata.task.ownerName
						+ "(" + mydata.task.owner + ")");
				$('#myWork_taskAssignerInput')
						.val(mydata.assignment.secondOwner);
				$('#myWork_taskDescTextArea')
						.val(mydata.task.description);
				$('#myWork_dueTime')
						.val(moment(new Date(mydata.task.dueDate))
								.format('YYYY-MM-DD hh:00'));
				$("#myWork_assignmentStatus").val(mydata.assignment.status);
				var logTable = "";
				if (mydata.taskTraceList != null) {
					$.each(mydata.taskTraceList, function() {
								var logRow = "<tr>";
								logRow += "<td>" + this.actionCode
										+ "</td>";
								logRow += "<td>" + this.description
										+ "</td>";
								logRow += "<td>"
										+ moment(new Date(this.createDate))
												.format('YYYY-MM-DD hh:00:ss')
										+ "</td>";
								logRow += "</tr>";
								logTable += logRow;
							});
				}

				$('#myWork_traceList').empty().append(logTable);

				var actionList = mydata.assignment.taskActionList;
				$('#myWork_taskOwnerDiv').hide();
				$('.myWork_dyncBtn').hide(); // 先隐藏所有的按钮，然后根据不同的状态显示不同的按钮
				if (actionList != null) {
					for (var i in actionList) {
						if (actionList[i] == "FIRST_CLAIM") {
							$("#myWork_claimBtn").show();
						} else if (actionList[i] == "SECOND_CLAIM") {
							$("#myWork_claimForwardBtn").show();
						} else if (actionList[i] == "FIRST_REJECT") {
							$("#myWork_rejectBtn").show();
						} else if (actionList[i] == "SECOND_REJECT") {
							$("#myWork_secondRejectBtn").show();
						} else if (actionList[i] == "FORWARD") {
							$("#myWork_forwardBtn").show();
							$("#myWork_taskOwnerDiv").show();
						} else if (actionList[i] == "ABORT") {
							$("#myWork_abortBtn").show();
						} else if (actionList[i] == "DONE") {
							$("#myWork_doneBtn").show();
						}
					}
				}
				if (mydata.assignment.secondOwner == null
						|| mydata.assignment.secondOwner == '') {
					$('#myWork_taskAssignerDiv').hide();
				}

				$('#myWork_workDetaiDiv').modal('show');
					
					
	
	},
	
	/**
	 * 截取相应的字符并拼接td
	 */
	sub : function(value) {
		var td = "";
		if (value.length <= 10) {
			td = "<td>" + value + "</td>";
		} else {
			td = "<td>" + value.substr(0, 10) + "...</td>";
		}
		return td;
	},
	createDialog : function(id, width) {
		$('#' + id).dialog({
					autoOpen : false,
					modal: true,
					width : width,
					buttons : {
						"关闭" : function() {
							$(this).dialog("close");
						}
					}
				});
				

	},
	ajaxRequest : function(url, type, dataType, callBack,jsonpCallBack) {
		callBack = callBack || $.noop;
		type = type || "get";
		/*$.ajax({
					url : url,
					dataType : dataType,
					type : type,
					success : callBack,
					error : function(data) {
						alert(data)
					}
				});*/
		 $.ajax({
				url: url,
				type: "GET",
				dataType:'jsonp',
				jsonp:'callback',
				jsonpCallback:jsonpCallBack,
				success:callBack,
				error:function(data,textStatus, errorThrown){
					//alert(data);
				}
			 });
	}

});

/**
 * 左侧菜单插件
 * 插件配置信息如下：
 * jsonUrl : 左侧菜单对应的后台url
 * targetType: iframe 通过iframe更新中间区域；href：通过打开新链接更新页面 :以后不用，用linkType替代 如果linkType 0代表iframe方式，centerDomId不能为空 1代表直接连接
 * centerDomId :中间iframe区域id
 * defaultMenuInfo：菜单主题区域默认不显示
 * 插件回调事件如下：
 * leftMenuAfterConstruct：回调事件，当菜单创建完毕后，无论有没有数据，都会调用
 * leftMenuInitOnce：与leftMenuAfterConstruct触发时机相同，用于在头部菜单在初始化页面时，调用一次；例如：sone 重新布局左侧
 * leftMenuAfterRender ：回调事件，当创建完菜单模板后调用，如果没有左侧菜单数据，不会创建菜单模板，也不会回调
   setTheme
		{
			type:"theme",
			data:{
				"市场" : {
					"QuotaName" : "PV",
					"Measure" : "0",
					"Radio" : "0%",
					"Diff" : "0"
				},
				"商品" : {
					"QuotaName" : "销量",
					"Measure" : "0",
					"Radio" : "0.%",
					"Diff" : "0"
				},
				"促销" : {
					"QuotaName" : "促销",
					"Measure" : "0",
					"Radio" : "0.%",
					"Diff" : "0"
				}
			}
		}
 */
$.widget("ui.soneLeftMenu", {
    //定义数据位空状态
	empty:false,
	options : {
		jsonUrl : '',
		//以后要给成从url获取
		defaultMenuInfo:[{"label":"<br>", "value": ""},{"label":"","value":""},{"label":"","value":""},{"label":"","value":""}],
		targetType:'iframe',
		centerDomId:'ifm'
	},
	_create : function() {
		this.element.addClass("wrap");
		var scope = this;

		if (this.options.data == null) {
			$.ajax({
						url : this.options.jsonUrl,
						type : "GET",
						 dataType:'jsonp',
						 jsonp:'callback',
						 jsonpCallback:'soneLeftMenuCallBack',
						success : function(mydata) {
							try {
								//mydata = $.parseJSON(mydata);
								mydata = eval(mydata);
								
							} catch (e) {
							}
                            scope.createMenu(mydata);
							
						}
					});

		} else {
			scope.createMenu(this.options.data);
		}

	},
	/**
	 * 根据后台返回的菜单数据，创建菜单
	 */
	createMenu:function(mydata){
	    if(mydata.length==0){
			this.empty=true;
			$("#left-menu").hide();	
			$("#page-wrapper").css("margin-left",0);
		}else{
			this.empty=false;
			$("#left-menu").show();
			$("#page-wrapper").css("margin-left",202);
			this.createTemplate(mydata);								
		}
	    this._trigger("leftMenuAfterConstruct", null);
		this._trigger("leftMenuInitOnce", null);

	},
	_init : function() {
	    //
	},
	/**
	* 创建整个菜单模板
	*/
	createTemplate : function(mydata) {
		var e=$(this.element);
		this.createMenuRecursion(e,mydata,1);

		e.find('.sone-left-menu').append('<div class="resizer"><b></b></div>');
		
		this._update(mydata);

		this._trigger( "leftMenuAfterRender", null,[mydata]);

	},
	/**
	* 递归构造多级菜单
	*/
	createMenuRecursion:function(dom,data,level){
	    var scope=this;
	    if(data==null ||data.length==0){
		   return ;
		}
		var menudiv='';
		//找到父text
		var parentId=this.genMenuItemId(dom);
		if(level==1){
		   menudiv='<div class="left-side"> <ul class="sone-left-menu"></ul></div>';
		}else{
		   menudiv='<div class="itm-lv2"><ul class="sone-menu-list" ></ul></div>';
		 
		}
		var root=dom.append(menudiv).find("ul");
	    $.each(data, function(n, item) {
		    var li=null;
			var hasChildren=item.children!=null &&item.children.length>0;
			if (item.type == "high" || item.type == "") {
				li=$(scope.createHighMenuItem(parentId,item,level,hasChildren));
				root.append(li);
				
			} else {
				li=$(scope.createLowMenuItem(parentId,item,level,hasChildren));
				root.append(li);
			}
			if(hasChildren){
			    scope.createMenuRecursion(li,item.children,level+1);
			}
		});
		 
	
	},
	/**
	* 用menu的名字拼写路径 例如：市场-市场行情
	*/
	genMenuItemId:function(dom){
	   var path="";
	   if(dom.is("li")){
	        var pathArr=$.map(dom.parents("li").add(dom),function(value,index){
				var temp=$(value).children(".item-div.itm-lv1");
				//识别宽窄菜单
				if(temp.children(".tit").length>0){
				   return temp.find(".tit span:eq(1)").text();
				}else{
				   return temp.find("span:eq(1)").text();
				}

		   });
	        path= pathArr.join("-");  
	   
	   }
	   return path;
	  
	},
	/**
	 * 创建高菜单项
	 */
	createHighMenuItem:function(parentId,item,level,hasChildren){
	    var levCls=this.getItemLevelClass(level);
		//获取默认主题区内容
		var menuInfo=this.getMenuInfo(item);
		var menuId=(item.menuId || '')==''?'':'id="'+item.menuId+'"';
		var radioDiffFlag='';
		var spanColor='white';
		if(parseInt(menuInfo[2].value) >0){
			radioDiffFlag='↑';
			spanColor='red';
		}else if(parseInt(menuInfo[2].value) ==0){
			radioDiffFlag='<br>';
			spanColor='white';
		}else if(parseInt(menuInfo[2].value) < 0){
			 radioDiffFlag='↓';
			 spanColor='green';
		}
		var themeId=parentId==""? item.name:parentId+"-"+item.name;
	    var highMenuItemHtml=
		  '<li '+menuId+' class="sidebar-menu item '+levCls+'" >'+
			   '<div class="item-div itm-lv1" linkType="'+item.linkType+'"url="' + item.url + '">'+
				'<div class="tit">'+
					 '<span class="'+item.iconClass+' text-center"></span>'+
					 '<span class="text-center">'+item.name+'</span>'+
				'</div>'+
				'<div class="con">'+
					'<div id="'+themeId+'_QuotaName'+'" class="theme-one">'+menuInfo[0].label+'</div>'+
					'<div id="'+themeId+'_Measure'+'" class="theme-two">'+menuInfo[1].value+menuInfo[1].label+'</div>'+
					'<div class="theme-three">'+
						'<span id="'+themeId+'_Flag" style="font-family: \'华文琥珀 Bold\', \'华文琥珀\';width: 10px;color:'+spanColor+'">'+radioDiffFlag+'</span>'+
						'<span id="'+themeId+'_Radio" style="font-size:10px;margin-left: 0px;color:'+spanColor+'">'+menuInfo[2].value+menuInfo[2].label+'</span>'+
						'<span id="'+themeId+'_Diff" style="font-size:10px;margin-left: 8px;color:'+spanColor+'">'+menuInfo[3].value+menuInfo[3].label+'</span>'+
					'</div>'+
				'</div>'+
			'</div>'
		'</li>';
		return highMenuItemHtml;
	},
	/**
	 * 创建低菜单项
	 */
    createLowMenuItem:function(parentId,item,level,hasChildren){
	    var menuInfo=this.getMenuInfo(item);
		var levClslevCls=this.getItemLevelClass(level);
		var menuId=(item.menuId || '')==''?'':'id="'+item.menuId+'"';
		var expandFlag='';
		if(hasChildren){
		   expandFlag='<i class="menu-expand fa fa-angle-right"></i>';
		}
	    var lowMenuItemHtml=
	    '<li '+menuId+'class="sidebar-menu item '+levClslevCls+'">'+
			'<div class="item-div itm-lv1" linkType="'+item.linkType+'" url="' + item.url + '">'+
			'<span class="'+item.iconClass+'" style="margin:0 5px 0 25px;"></span>'+
			'<span class="narrow-name">'+item.name + '</span>'+
			expandFlag+
			'</div>'+
		'</li>';
		return lowMenuItemHtml;
	},
	//以后不用
	createMenuItem:function(item){
	    var menuId=(item.menuId || '')==''?'':'id="'+item.menuId+'"';
	    var menuItemHtml='<li class="sidebar-menu item" '+menuId+'><a linkType="'+item.linkType+'" href="' + item.url + '">'+ item.name + '</a></li>';
		return menuItemHtml;
	},
	/**
	 * 取出主题区内容
	 */
	getMenuInfo:function(item){
	    var menuInfo=null;
		menuInfo=this.options.defaultMenuInfo;
		if(item.infoUrl!=""){
			try{
			   menuInfo=eval(item.infoUrl);
			}catch(e){
			  
			}
		}
		return menuInfo;
	},
	_setOption : function(key, value) {
		// this.options[key] = value;
	},

	_update : function(data) {

		this._initEvents();
	},

	_initEvents : function(element) {
	    var scope=this;
		var _ele = element || this.element;

		//整个菜单变宽、变窄
		$(".resizer", _ele).click(function() {
					$(".wrap").toggleClass("narrow-wrap");
					$("#page-wrapper").toggleClass("narrow-content");
					  
					  
					  $(".item", _ele).find(".itm-lv2").removeAttr("style");
				});
		//点击菜单 展开子菜单
		$(".itm-lv1", _ele).click(function() {
			if (!$(".wrap", _ele).hasClass("narrow-wrap")) {
				if ($(this).parent().hasClass("item-open")) {
					$(this).parent().removeClass("item-open");
				} else {
					$(this).parent().parent().children(".item-open").removeClass("item-open");
					$(this).parent().addClass("item-open");
				}
			}
		});
        //折叠后hover右侧菜单弹出
		$(".sone-left-menu .item", _ele).hover(function() {
					if ($(".wrap").hasClass("narrow-wrap")) {
						if ($(this).hasClass("item-open")) {
							isOpen = true;
						} else {
							isOpen = false;
						}
						$(this).addClass("item-open").find(".itm-lv2").show();
					}
				}, function() {
					if ($(".wrap").hasClass("narrow-wrap")) {
						if (!isOpen) {
							$(this).removeClass("item-open"); 
						}
						$(this).find(".itm-lv2").hide();
					}
				});
		//点击菜单将当前li添加curr样式

		 $(".itm-lv1", _ele).click(function() {
					$(this).parent().parent().children("li").removeClass("curr");
					$(this).closest("li").addClass("curr");
				});
		

		//点击菜单打开链接
		$("#left-menu div.itm-lv1").bind("click",{targetType:scope.options.targetType,centerDomId:scope.options.centerDomId},scope.processLink);

	},
    processLink:function (o) {
		var link = $(this).attr("href")||$(this).attr("url");
		if(link==undefined || link==""){
			return true;
		}
		var linkType=$(this).attr("linkType");
		//先判断menu 链接类型
		if(linkType=="undefined"){
		    if(o.data.targetType=="iframe"){
			   linkType=0;
			}else{
			   linkType=1;
			}
		}
		if(link.indexOf("http")==-1){
			if(link.indexOf("/")==0){
				link=window.location.protocol+"//"+window.location.host+link;
			}else{
				link=window.location.protocol+"//"+window.location.host+"/"+link;
			}	
		}					
		if(linkType==0){
		    var center=$("#"+o.data.centerDomId);
			if(center.length==0){
			   center=$("iframe");
			}
			center.attr('src', link);
		}else if(linkType==1){
			window.location.href=link;
		}
		o.preventDefault();
	},
	destroy : function() {
		this.element.removeClass('wrap').text("");
		$.Widget.prototype.destroy.call(this);

	},
	getEmpty:function(){
	    return this.options.empty;
	},
	getItemLevelClass:function(level){
	    var levelCls=['item-one','item-two','item-three','item-four','item-five','item-six','item-seven','item-eight','item-nine'];
		return levelCls[level-1];
	}

});

/**
 * 头部标准化控件主要配置项目如下：
 * showSearch :是否显示搜索框
 * showNotices:是否显示营销通知
 * showTasks：是否显示任务通知
 * logoUrl：logo url
 * centerDomId:中间区域id，当headerTargetType为 create时，可以根据此 id刷新中间iframe，通过回调
 * userInfo：用户登录信息，userName logonTime 需要自己设置
 * logoutUrl：用户推出登录需要访问的url
 * navBefore ：头部导航第一条，自己添加的，不是通过获取后台配置json获取的
 * navAfter ：头部导航最后一条，自己添加的，不是通过获取后台配置json获取的
 * headerTargetType ：create，点击头部导航不刷新页面，自己创建；href，点击头部导航直接连接到新的url:已经不用用配置菜单linkType替代
 * jsonUrl: 头部菜单获取的url，可以是静态的路径，也可以是后台jsonp服务
 * menuJsonUrl:左侧菜单获取的url，可以是静态的路径，也可以是后台jsonp服务，因为头部搜索框需要根据左侧菜单内容生成下拉框，所以需要获取左侧菜单
 * initMenuId: 页面第一次出现的时候,左侧菜单id，可是是静态文件名字，也可以是菜单配置页面配置的菜单id
 * headerTargetType：create 不刷新页面，直接创建菜单；href，打开新页面
 *
 * 回调事件如下：
 * headerMenuClick：点击头部菜单时候，headerTargetType：create时候，创建完菜单后出发此事件
 * headerAfterRender：在头部模板构造完毕触发此事件
 *
 * @author songquanwang
 */

$.widget("ui.soneHeader", {
	options : {
		showSearch:true,
		showNotices:true,
		showTasks:true,
		centerDomId:'ifm',
		userImg : './img/avatar3.png',
		userInfo:{},
		logoUrl:'',
		logoText:'UI标准化模板',
		logoutUrl:'javascript:;;',
		navBefore:'',
	    navAfter:'',
		headerTargetType:'create',
		currHeaderMenu:0

	},

	_create : function() {
		var scope = this; 
		var jsonUrl=this.processPath(scope.options.jsonUrl);
		if(this.options.data==null){
			  $.ajax({
				 url: jsonUrl,
				 type: "GET",
				 dataType:'jsonp',
				 jsonp:'callback',
				 jsonpCallback:"soneHeaderCallBack",
				 success:function(mydata) {
					try{
						//mydata = $.parseJSON(mydata);
						mydata = eval(mydata);
					}catch(e){
					}
					scope.createTemplate(mydata);
				},
				error:function(data,textStatus, errorThrown){
					//alert(data);
				}
			 });
		
		}else{
		    scope.createTemplate(this.options.data);
		}
		
	},
	/**
	 * 创建Header页面dom
	 * @param {} mydata
	 */
	createTemplate:function(mydata){
	    var scope=this;
	    var logoText=this.options.logoText;
		var logoStyle='';
		if(this.options.logoUrl!=''){
		    logoStyle='style="background:url('+this.options.logoUrl+') no-repeat;margin-top:6px;"';
			logoText='';
		}
		var userName=this.options.userInfo.userName||'';
		var tplStr='';
	    tplStr +='<div class="header-main"> '
				+ '<div class="logo"'+logoStyle+'>'+logoText+'</div>'
				+ '<div  class="nav" id="navlist">'
				+ '<ul id="navfouce"></ul>'
				+ '</div>'
				+ '<div class="nav-option">'
				+ '<a href="javascript:;" class="prev">&lt;</a>'
				+ ' <a href="javascript:;" class="next">&gt;</a>'
				+ ' </div>'
				+ ' <div class="navbar-right">';
		if(this.options.showSearch){
		   tplStr+='<form onsubmit="return false;" class="navbar-form navbar-left search-bar " role="search">'
			+'<div class="form-group">'
			+ '	<input  id="search" class="form-control" type="text" placeholder="Search...">'
			+ '	</div>'
			+ '	<button id="serachButton" class="btn btn-default" type="submit" data-original-title="Search"><span class="glyphicon glyphicon-search"></span></button>'
			+ '</form>';
		 
		}
		tplStr+= ' <ul class=" navbar-nav">';
		if(this.options.showNotices){
		   tplStr+=' <li id="noticeList" class="dropdown  messages-menu">'
			+ '<a class="dropdown-toggle" data-toggle="dropdown" href="#"><i class="glyphicon glyphicon-envelope"></i>'
			+ ' </a></li>';
		}
		if(this.options.showTasks){
			tplStr+= ' <li id="taskList" class="dropdown projects-menu">'
			+ '<a class="dropdown-toggle" data-toggle="dropdown" href="#"><i class="glyphicon glyphicon-list"></i>'	
			+ ' </a></li>';
		
		}
		tplStr+=' <li class="dropdown user-menu">'
		+ '<a class="dropdown-toggle" data-toggle="dropdown" href="#"><i class="glyphicon glyphicon-user"></i>&nbsp;<i style="font-style:normal ">'+userName+'</i>  <i class="caret"></i></a>  <ul class="dropdown-menu fore3 " role="menu"></ul>'
		+ ' </li>' + ' </ul>' + '</div>'
		//二级菜单
		+'<div class="box" id="navbox" style="height:0px;opacity:0;overflow:hidden;"></div>'
		+' </div>';
		var tpl=$(tplStr);

		//递归创建头部导航菜单
		scope.createHeaderMenuRecursion(tpl,mydata,1);
		//用户信息
     
		tpl.find(".navbar-right .fore3").append(scope.createUserInfo());
		

		this.element.html(tpl);
		
		if(this.options.navBefore){
			tpl.find("#navlist ul").prepend(this.options.navBefore);
		}
		if(this.options.navAfter!=""){
			tpl.find("#navlist ul").append(this.options.navAfter);
		}
		
		//添加搜索框
		var initMenuJsonPath=scope.getJsonPath(scope.options.initMenuId);
		this.addSearchInput(function(mydata){
		  //第一次执行，添加左侧菜单
		   scope.createLeftMenu(mydata,true);
		   	   
		   
		},initMenuJsonPath);
		
		//添加通知
		if(this.options.showNotices){
		      this.createNotice("noticeList");
		}
		//添加任务
		if(this.options.showTasks){
		     this.createTask("taskList");
		}

		this._update(mydata);
		this.initPage();
	    this._trigger( "headerAfterRender", null);
	
	},
	/**
	* 递归构造多级头部菜单 暂时只支持两层
	*/
	createHeaderMenuRecursion:function(dom,data,level){
	    var scope=this;
	    if(data==null ||data.length==0){
		   return ;
		}
		var root=null;
		if(level==1){
		   root=dom.find("#navlist ul");
		}else if(level==2){
		   var menudiv='<div class="cont" style="display:none;"><ul></ul></div>';
		   root=dom.find("#navbox").append(menudiv).find("ul");
		}
	    $.each(data, function(n, item) {
		    var li=null;
			var hasChildren=item.children!=null &&item.children.length>0;	
			//暂时不是递归 直接传递dom
			li=$(scope.createHeaderMenuItem(item,level,hasChildren));
			root.append(li);
			if(hasChildren){
			    scope.createHeaderMenuRecursion(dom,item.children,level+1);
			}
		});
	},
	/**
	* 创建头部导航菜单项
	*/
    createHeaderMenuItem:function(item,level,hasChildren){
	    var menuId=(item.menuId || '')==''?'':'id="'+item.menuId+'"';
		var headerMenuItemHtml=
		    '<li '+menuId+'><a href="javascript:;" level='+item.level+' sonMenuNum='+item.sonMenuNum+' menuId="'+item.id+'" linkType="'+item.linkType+'"url="'+ item.url +'">'+ item.name+'</a></li>';
		return headerMenuItemHtml;
	},
	
	/*
	* 创建用户信息
	*/
	createUserInfo:function(){
	   	//用户信息
        var userInfo=this.options.userInfo;
		userInfo.userName=userInfo.userName||'';
		userInfo.logonTime=userInfo.logonTime||'';
		userInfo.userImg=userInfo.userImg||this.options.userImg;
		var logoutUrl=this.options.logoutUrl;
		//var profile=<div class="pull-left"><a class="btn btn-default btn-flat" href="javascript:;;">Profile</a></div> 暂时不用
		var userInfoHtml = '<li  class="text-center user-header ">'
		         +'<div style="background:(url('+userInfo.userImg+')"></div>'
				//+ ' <img src="'
				//+ userInfo.userImg
				//+ '" class="img-circle" alt="">'
				+ '<h4 class="text-center">'
				+ userInfo.userName
				+ '</h4>'
				+ '<p class="text-center">'
				+ userInfo.logonTime
				+ '</p>'
				+ '</li>'
				+ '<li class="user-footer"><div class="pull-right"><a class="btn btn-default btn-flat" href="'+logoutUrl+'">注销</a></div></li>';
		return userInfoHtml;
	
	
	},
	_setOption : function(key, value) {
		this.options[key] = value;

	},

	_update : function(data) {

		this._initEvents();
	},

	_initEvents : function(element) {
	    var scope=this;
		var _ele = element || this.element;
		
		function layout(){
		     var w = $(document.body).width();
			//实际导航数量
			var n = $(".nav", _ele).find("li").length;
			//屏幕可以容纳导航个数
			var num = parseInt((w - 766) / 110);
			var step = 0;
			var isClick = false;
			if (n <= num) {
				//num = n;
				$(".nav-option", _ele).hide();
			} else if (n > num) {
				$(".nav-option", _ele).show();
			}
            $(".nav-option .next", _ele).css("left",(250+110*num)+"px");
			$(".nav", _ele).css("width", 110 *  num + "px");
			$(".nav ul", _ele).css("width", 110 * n + "px");

			$(".nav-option .next", _ele).click(function() {
					if (step < (n - num) && !isClick) {
						step++;
						isClick = true;
						$(".nav ul", _ele).animate({
									"left" : -step * 110 + "px"
								}, 1000);
						setTimeout(function() {
									isClick = false;
								}, 1000);
					}
				});
			$(".nav-option .prev", _ele).click(function() {
				if (step != 0 && !isClick) {
					step--;
					isClick = true;
					$(".nav ul", _ele).animate({
								"left" : -step * 110 + "px"
							}, 1000);
					setTimeout(function() {
								isClick = false;
							}, 1000);
				}
			});
		
		}
		$(document).ready(function(e) {
		    layout();
            window.onresize =layout;
        }); 
		
		this.addFirstMenuEvent();
		this.addSecondMenuEvent();

	},

	_destroy : function() {
		this.element.text("");
		$.Widget.prototype.destroy.call(this);

	},
	
	/**
	* 模板构建完成后，初始化页面状态，默认选中以一个导航
	*/
	initPage:function(){
	   this.selectHeaderOneLevel(this.options.currHeaderMenu);
	},
	createLeftMenu:function(mydata,first){
	    var scope=this;
		if($('#left-menu').data("ui-soneLeftMenu")!=undefined){
			    $('#left-menu').soneLeftMenu('destroy');
		}
		var op={
			//jsonUrl:menuJsonUrl,
			data:mydata,
			centerDomId:scope.options.centerDomId,
			targetType : scope.options.menuTargetType,
			leftMenuAfterRender:scope.options.leftMenuAfterRender,
            leftMenuAfterConstruct:scope.options.leftMenuAfterConstruct
		};
		if(first){
			op.leftMenuInitOnce=scope.options.leftMenuInitOnce
		}
		var menu=$('#left-menu').soneLeftMenu(op);
	
	},
	/**
	* 添加搜索框，需要获取左侧导航数据
	*/
	addSearchInput:function(callBackFun,jsonUrl){
	    //添加搜索菜单
		var scope=this;
		var _ele = this.element;
		$.ajax({
				 url: jsonUrl,
				 type: "GET",	
				 dataType:'jsonp',
				 jsonp:'callback',
				 jsonpCallback:"soneLeftMenuCallBack",
				 success:function(mydata) {
					try{
						//mydata = $.parseJSON(mydata);
						mydata = eval(mydata);
					}catch(e){
					    mydata=[];
					}
					//构造左侧菜单
					callBackFun(mydata);
					
					var mapStructure={map:{},names:[]};
					scope.genMap('',mydata,mapStructure);
					$('#search').typeahead("destroy");
					$('#search', _ele).typeahead({
						source:mapStructure.names,
						items : 4,
						afterSelect:function (item) {
                            var value=$("#search").val();
							 if(value==''){
								 return false;
							 }
							 var href=mapStructure.map[value];
							 if(href==null){
							    return false;
							 }
							 $(".itm-lv2 a[href='"+href+"']").trigger("click");
							 $(".itm-lv1[url='"+href+"']").trigger("click");
							 return false;
						 }

					});
				},
				error:function(data){
					//alert(data);
				}
			 });
	
	
	},
	
	/**
	*为一级导航添加点击事件
	*/
	addFirstMenuEvent : function() {
	   var scope=this;
       $("#navlist  a").click(function(o){
			 if($(this).parent().hasClass("curr")){
				return false;
			 }
			 //点击一级菜单 隐藏left menu 修改iframe
			 $("#navlist  li").removeClass("curr");
			 var index=$("#navlist  li").index($(this).closest("li"));
			 $(this).parent().addClass("curr");
			 var url=$(this).attr("url");
			 var menuId=$(this).attr("menuid");
			 var level=$(this).attr("level"); 
			 var sonMenuNum=$(this).attr("sonMenuNum"); 
			 var linkType=$(this).attr("linkType"); 
			 scope.menuClick(level,sonMenuNum,url,index,menuId,linkType);
			 
			 return false;
		});
	},
	
	/**
	 *为二级导航添加事件，hover、点击事件
	 */
	addSecondMenuEvent : function() {

		var time = null;
		var list = $("#navlist");
		var box = $("#navbox");
		var lista = list.find("a");

		for (var i = 0, j = lista.length; i < j; i++) {
			if (lista[i].className == "now") {
				var olda = i;
			}
		}

		var box_show = function(hei) {
			box.stop().animate({
						height : hei,
						opacity : 1
					}, 40);
		}

		var box_hide = function() {
			box.stop().animate({
						height : 0,
						opacity : 0
					}, 40);
		}

		lista.hover(function() {
					lista.removeClass("now");
					$(this).addClass("now");
					box_hide();
					clearTimeout(time);
					var index = list.find("a").index($(this));
					if(box.find(".cont").hide().eq(index).length>0){
					    box.find(".cont").hide().eq(index).show();
						var _height = box.find(".cont").eq(index).height() + 25;
						box_show(_height);
					}
					
				}, function() {
					time = setTimeout(function() {
								box.find(".cont").hide();
								box_hide();
							}, 50);
					lista.removeClass("now");
					lista.eq(olda).addClass("now");
				});

		box.find(".cont").hover(function() {
					var _index = box.find(".cont").index($(this));
					lista.removeClass("now");
					lista.eq(_index).addClass("now");
					clearTimeout(time);
					$(this).show();
					var _height = $(this).height() + 25;
					box_show(_height);
				}, function() {
					time = setTimeout(function() {
								$(this).hide();
								box_hide();
							}, 50);
					lista.removeClass("now");
					lista.eq(olda).addClass("now");
				});
		//添加二级菜单点击事件
		var scope=this;
		$("#navbox a").click(function(){
		      $("#navfouce li").removeClass("curr");
		      var index=$("#navbox .cont").index($(this).closest(".cont"));
			  $("#navfouce li").eq(index).addClass("curr");
			  var menuId=$(this).attr("menuid");
			  //重新构建LeftMenu iframe 欢迎界面
		      var url=$(this).attr("url");
			  var level=$(this).attr("level"); 
			  var sonMenuNum=$(this).attr("sonMenuNum");
			  var linkType=$(this).attr("linkType"); 
			  scope.menuClick(level,sonMenuNum,url,index,menuId,linkType);
			  
			  return false;
		});
		

	},
	
	/**
	 *点击菜单后，统一处理点击事件，构造搜索框，添加左侧菜单
	 */
	menuClick:function(level,sonMenuNum,url,index,menuId,linkType){
	    //url空且 有菜单才对;
	    var scope=this;
		//先判断menu 链接类型
		if(linkType=="undefined"){
		    if(this.options.headerTargetType=="create"){
			   linkType=0;
			}else{
			   linkType=1;
			}
		}
		if(linkType==0){
		    //如果点击一级导航，但是一级导航下面有二级导航，则不反应
			if(parseInt(level)==1 && parseInt(sonMenuNum) >0 ){
				return false;
			}
			var menuJsonUrl=scope.getJsonPath(menuId);
			function createMenu(mydata){
				scope.createLeftMenu(mydata,false);
				var centerDomId=scope.options.centerDomId;
				var welcomePage=scope.options.welcomePage;
				scope._trigger( "headerMenuClick",null,[centerDomId,url,level,index,menuId]);
				var center=$("#"+centerDomId);
				if(center.length==0){
				   center=$("iframe");
				}
				if(url!=""){
			        center.attr('src', url);
				}else{
					center.attr('src', welcomePage+"?menuId="+menuId+"&url=");
				}
			}
			//重新初始化搜索框
			scope.addSearchInput(createMenu,menuJsonUrl);
		
		}else if(linkType==1){
		    var link=scope.processPath(url);
			window.location.href=link;
		
		}
	 
	},
	genMap:function(path,menu,mapStructure){
	    var scope=this;
	    if(menu==null ||menu.length==0){
		    return ;
		}
		for(var i=0;i<menu.length;i++){
		    var m=menu[i];
			if(m.url!=null && m.url!=''&& m.name!=null && m.name!=''){
			    mapStructure.map[path+'-'+m.name]=m.url;
				mapStructure.names.push(path+'-'+m.name)
			}
			if(m.children !=null && m.children.length!=0){
			    var p=path;
			    if(path!=''){
				   p+='-';
				}
				scope.genMap(p+m.name,m.children,mapStructure);
			}
		
		}
	
	},
	
	/**
	 *添加notice功能
	 */
	createNotice:function(noticeDomId){

		$("#"+noticeDomId).soneNoticeAndTask({type:'notice'});
	},
	
	/**
	 * 添加任务功能
	 * @param {} taskDomId dom id
	 */
	createTask:function(taskDomId){

		$("#"+taskDomId).soneNoticeAndTask({		
			type:'task'		
		});
	},
	/**
	 * 根据测试和真实环境，动态生成 后台url，支持相对路径、绝对路径
	 * @param {} menuId
	 * @return {}
	 */
	getJsonPath:function(menuId){
	   	//判断路径
		var menuJsonUrl=this.processPath(this.options.menuJsonUrl);
		if(this.options.mock==true){
			menuJsonUrl=menuJsonUrl+'/'+menuId;
		}else{
			menuJsonUrl=menuJsonUrl+"?parentId="+menuId;
		}
		return menuJsonUrl;
	
	},
	/**
	 * 如果mock 获取 当前路径中的json；如果真实环境，获取jsonp服务器上的路径
	 * @param {} url
	 * @return {}
	 */
	processPath:function(url){
	    //如果相对路径 mock情况下本域，上线情况下jsonp域
	    var domain=this.options.jsonp_domain;
	    if(this.options.mock==true){
		    domain=window.location.protocol+"//"+window.location.host;
		}
		//如果绝对路径直接用，否则添加域名
	    if(url.indexOf("http")==-1){
			if(url.indexOf("/")==0){
				url=domain+url;
			}else{
				url=domain+"/"+url;
			}	
		}	
		return url;
	
	},
	/**
	 * 为某个导航添加选中效果
	 * @param {} num
	 */
	selectHeaderOneLevel:function(numOrId){
	    //init first curr
		if(typeof numOrId =="number"){
		   $("#navlist ul li:eq("+numOrId+")").addClass("curr");
		}else{
		   $("#"+numOrId).parent().children("li").removeClass("curr");
		   $("#"+numOrId).addClass("curr");
		}
	
	},
	selectHeaderTwoLevel:function(){
	
	}
	

	
});

/**
 * 整体页面入口插件
 * SONE_MOCK :是开发测试，还是线上，如果开发测试，点击头部菜单根据菜单url id名字找后台静态文件；线上根据parentId找以它为根的json
 * jsonp_domain: jsonp服务域名
 * 回调事件：
 * init：初始化全局变量
 * NOTICE_SUMMARY_TABLE_URL  =JSONP_DOMAIN+'/salesNotice/queryUnReadByGroupJsonp'; 最近五个未读通知列表url，jsonp或者静态文件
 * NOTICE_DETAIL_URL  = JSONP_DOMAIN+'/salesNotice/detailJsonp';                   单个通知详情url，jsonp或者静态文件
 * NOTICE_PAGE_TABLE_URL  = JSONP_DOMAIN;                                          通知全部列表url，jsonp或者静态文件       ：暂时没实现，用户点击 "更多" 链接到sone
 * TASK_SUMMARY_TABLE_URL  = JSONP_DOMAIN+'/myWork/listUnReadJsonp';               最近五个未读任务列表url，jsonp或者静态文件
 * TASK_DETAIL_URL  = JSONP_DOMAIN+'/myWork/viewJsonp';                            单个任务详情url，jsonp或者静态文件
 * TASK_PAGE_TABLE_URL  = JSONP_DOMAIN;                                            全部任务列表url，jsonp或者静态文件       ：暂时没实现，用户点击 "更多" 链接到sone
 *	
   setThemeValue
   设置主题区域，内容格式如下：
   
   {
		"市场" : {
			"QuotaName" : "PV",
			"Measure" : "30",
			"Radio" : "33%",
			"Diff" : "44"
		},
		"商品" : {
			"QuotaName" : "销量",
			"Measure" : "66",
			"Radio" : "-45.%",
			"Diff" : "789"
		},
		"促销" : {
			"QuotaName" : "促销",
			"Measure" : "890",
			"Radio" : "16.%",
			"Diff" : "987"
		}
	}
 */
$.widget("ui.soneDashboard", {
	options : {
       init:$.noop
	   
	},

	_create : function() {
	    SONE_MOCK=this.options.mock;
		JSONP_DOMAIN=this.options.jsonp_domain;
        this._trigger("init", null);
		this.createTemplate();
		this.createStaticFunction();
	},
	createTemplate:function(){
	  
	     if($("#left-menu").length==0){
		    this.element.prepend('<div id="left-menu"> </div>');
		 }
		 if($("#header").length==0){
		    this.element.prepend('<div id="header"></div>');
		 }
		 $('#header').soneHeader(this.options);
	
	},

	_setOption : function(key, value) {
		this.options[key] = value;
        
	},

	_update : function(data) {

		this._initEvents();
	},

	_initEvents : function(element) {

	},

	_destroy : function() {
		this.element.text("");
		$.Widget.prototype.destroy.call(this);

	},
	createStaticFunction:function(){
	
	    SoneDashboard={
		    selectHeaderMenu:function(num){
			//init first curr
			  num=num-1;
			  $("#navlist ul li").removeClass("curr");
			  $("#navlist ul li:eq("+num+")").addClass("curr");
		
			},
			selectHeaderMenuById:function(headMenuId){
		       $("#"+headMenuId).parent().children("li").removeClass("curr");
			   $("#"+headMenuId).addClass("curr");
		    },
			selectLeftMenu:function(level1,level2){
			    if(level1!=undefined){
				    level1=level1-1;
					$("#left-menu .sidebar-menu").removeClass('item-open');
					$("#left-menu .sidebar-menu:eq("+level1+")").addClass('item-open');
					
				}
				if(level2!=undefined){
				    level2=level2-1;
					$("#left-menu .sidebar-menu .itm-lv2 li").removeClass('curr');
					$("#left-menu .sidebar-menu:eq("+level1+") .itm-lv2 li:eq("+level2+")")
						.addClass('curr');
					
				}
			
			},
			selectLeftMenuById:function(menuId){
			    
				$("#left-menu .sidebar-menu").removeClass('item-open curr');
				$("#left-menu #"+menuId).addClass('item-open curr');
				$("#left-menu #"+menuId).parents("li").addClass('item-open curr');
			
			},
			narrowLeftMenu:function(){
			   $(".wrap").addClass("narrow-wrap");
			   $("#page-wrapper").addClass("narrow-content");
			},
			broadenLeftMenu:function(){
			   $(".wrap").removeClass("narrow-wrap");
			   $("#page-wrapper").removeClass("narrow-content");	
			},	
			getNumber: function (str){
			   var n=0;
			   var isNagative=1;
			   if(str==""){
				  return n;
			   }
			   var start=0;
			   var end=str.length+1;
			   if(str.substring(0,1)=="-1"){
				  start=1;
				  isNagative=-1;
			   }
			   if(str.substring(str.length-1)=="%"){
				  end=str.length;
			   } 
			   var temp=parseInt(str.substring(start,end));
			   if(!$.isNumeric(temp)){
				  n=temp;
			   }
			   return isNagative * n;
			},
			setThemeValue:function(themeData){
			   
				for(var text in themeData){
					var value=themeData[text];
						//指标名字
					$("#"+text+"_QuotaName").text(value.QuotaName);
					//指标值
					var measure=value.Measure;
					if(parseInt(measure)>9999999){
						measure=(measure/10000)+"万";
					}
					$("#"+text+"_Measure").text(measure);
					//升降比率
					var radio=value.Radio;		
					var radioNumber=SoneDashboard.getNumber(radio);
					if(radioNumber <0 ){
						var t=-radioNumber+"%";
						$("#"+text+"_Flag").text('↓').css('color', 'green');
						$("#"+text+"_Radio").text(t).css('color', 'green');;
					}else if(radioNumber > 0){
						var t=radioNumber+"%";
						$("#"+text+"_Flag").text('↑').css('color', 'red');
						$("#"+text+"_Radio").text(t).css('color', 'red');
					}else{
						$("#"+text+"_Flag").text("");
						$("#"+text+"_Radio").text("");
					}	
					//变化
					var diff=value.Diff;
					var diffNumber=SoneDashboard.getNumber(diff);
					if(diffNumber<0){
						var d=-diffNumber;
						$("#"+text+"_Diff").text(diff).css('color', 'green');
					}else if(diffNumber>0){
						$("#"+text+"_Diff").text(diff).css('color', 'red');
					}else{
						$("#"+text+"_Diff").text("");
					}
				}
				
			},
			setMenuTipNum:function(data){
			   var dom=$("#"+data.menuId+" >.item-div.itm-lv1");
			   //不存在s子孙节点
			   if(dom.find("s").length==0 ){
			        //识别宽窄菜单
			       if(dom.children(".tit").length>0){
				       dom.children(".tit").append("<s></s>");
				   }else{
				       dom.append("<s></s>");
				   }
 
			   }
			   dom.find("s").text(data.num);
			   
			},
			updateMenuTipNum:function(data){
			   var dom=$("#"+data.menuId+" >.item-div.itm-lv1 s");
			   var numStr=dom.text();
			   if(dom.length>0 && $.isNumeric(numStr) && $.isNumeric(data.num) ){
				   var r=parseInt(numStr)+parseInt(data.num);
				   if(r<0){
				      r=0;
				   }
				   dom.text(r);
			   }
			},
			processMessage:function(messageData){
			    var msg=messageData.message;
				var type=msg.type;
				switch(type)
				{
				case "theme":
				   SoneDashboard.setThemeValue(msg.data);
				   break;
				case "selectmenu":
				   SoneDashboard.selectLeftMenuById(msg.data.menuId);
				   break;
				case "selectheader":
			        SoneDashboard.selectHeaderMenuById(msg.data.menuId);
			        break;
				case "execfun":
			        eval( "("+msg.data+")()");
			        break;
				case "setApproveCount" :
				    SoneDashboard.setMenuTipNum(msg.data);
					break;
				case "updateApproveCount" :
				    SoneDashboard.updateMenuTipNum(msg.data);
					break;
				default:
				  
				}
			}
		
		};

	}
	
});
